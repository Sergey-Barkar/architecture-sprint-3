name: smart_home_system

services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev --http-port=18080
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
    restart: unless-stopped
    ports:
      - "18080:18080"
    volumes:
      - ./.containers/identity:/opt/keycloak/data
    networks:
      - smarthomesystem_network

  userdevice:
    container_name: userdevice
    build:
      context: ./src/userdevice
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - "8080:8080"
    depends_on:
      - init-kafka
      - keycloak
      - userdevice_db
    networks:
      smarthomesystem_network:
  
  userdevicetelemetry:
    container_name: userdevicetelemetry
    build:
      context: ./src/userdevicetelemetry
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: 8081
    ports:
      - "8081:8081"
    depends_on:
      - userdevice
      - keycloak
      - userdevicetelemetry_db
    networks:
      smarthomesystem_network:

  userdevice_db:
    command: -p 5433
    image: postgres
    container_name: userdevice_db
    hostname: device_db
    environment:
      POSTGRES_DB: device
      POSTGRES_USER: DBadmin
      POSTGRES_PASSWORD: DBadmin
      PGDATA: /var/lib/userdevice_db/data/pgdata
    volumes:
      - ./userdevice_db_data:/var/lib/userdevice_db/data
    ports:
      - 5433:5433
    networks:
      smarthomesystem_network:
 
  userdevicetelemetry_db:
    command: -p 5434
    image: postgres
    container_name: userdevicetelemetry_db
    hostname: userdevicetelemetry_db
    environment:
      POSTGRES_DB: devicetelemetry
      POSTGRES_USER: DBadmin
      POSTGRES_PASSWORD: DBadmin
      PGDATA: /var/lib/userdevicelemetry_db/data/pgdata
    volumes:
      - ./userdevicelemetry_db_data:/var/lib/userdevicelemetry_db/data
    ports:
      - 5434:5434
    networks:
      smarthomesystem_network:

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:29092,DOCKER://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,DOCKER://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - ./volumes/data/kafka:/var/lib/kafka/data
    networks:
      smarthomesystem_network:
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8200:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      smarthomesystem_network:

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "kafka-topics --bootstrap-server kafka:9092 --list
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic telemetry --replication-factor 1 --partitions 1"
    networks:
      smarthomesystem_network:

  kong:
    image: kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: warn
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yaml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
    healthcheck:
      test: ["CMD", "kong", "health"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - userdevice
      - userdevicetelemetry
    volumes:
      - ./kong/:/usr/local/kong/declarative
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    networks:
      smarthomesystem_network:

volumes:
    userdevice_db_data:
    userdevicelemetry_db_data:
    
networks:
  smarthomesystem_network:
    driver: bridge