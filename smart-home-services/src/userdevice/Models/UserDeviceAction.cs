/*
 * Smart Home Control System
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SmartHomeSystem.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserDeviceAction : IEquatable<UserDeviceAction>
    { 
        /// <summary>
        /// the action Id
        /// </summary>
        /// <value>the action Id</value>
        [Required]

        [DataMember(Name="actionId")]
        public int? ActionId { get; set; }

        /// <summary>
        /// Gets or Sets ActionValueType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActionValueTypeEnum
        {
            /// <summary>
            /// Enum StringEnum for string
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum = 0,
            /// <summary>
            /// Enum IntegerEnum for integer
            /// </summary>
            [EnumMember(Value = "integer")]
            IntegerEnum = 1,
            /// <summary>
            /// Enum NumberEnum for number
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum = 2        }

        /// <summary>
        /// Gets or Sets ActionValueType
        /// </summary>
        [Required]

        [DataMember(Name="actionValueType")]
        public ActionValueTypeEnum? ActionValueType { get; set; }

        /// <summary>
        /// Gets or Sets ActionValueInt
        /// </summary>

        [DataMember(Name="actionValueInt")]
        public int? ActionValueInt { get; set; }

        /// <summary>
        /// Gets or Sets ActionValueString
        /// </summary>

        [DataMember(Name="actionValueString")]
        public string ActionValueString { get; set; }

        /// <summary>
        /// Gets or Sets ActionValueNumber
        /// </summary>

        [DataMember(Name="actionValueNumber")]
        public decimal? ActionValueNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDeviceAction {\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  ActionValueType: ").Append(ActionValueType).Append("\n");
            sb.Append("  ActionValueInt: ").Append(ActionValueInt).Append("\n");
            sb.Append("  ActionValueString: ").Append(ActionValueString).Append("\n");
            sb.Append("  ActionValueNumber: ").Append(ActionValueNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserDeviceAction)obj);
        }

        /// <summary>
        /// Returns true if UserDeviceAction instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDeviceAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDeviceAction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActionId == other.ActionId ||
                    ActionId != null &&
                    ActionId.Equals(other.ActionId)
                ) && 
                (
                    ActionValueType == other.ActionValueType ||
                    ActionValueType != null &&
                    ActionValueType.Equals(other.ActionValueType)
                ) && 
                (
                    ActionValueInt == other.ActionValueInt ||
                    ActionValueInt != null &&
                    ActionValueInt.Equals(other.ActionValueInt)
                ) && 
                (
                    ActionValueString == other.ActionValueString ||
                    ActionValueString != null &&
                    ActionValueString.Equals(other.ActionValueString)
                ) && 
                (
                    ActionValueNumber == other.ActionValueNumber ||
                    ActionValueNumber != null &&
                    ActionValueNumber.Equals(other.ActionValueNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActionId != null)
                    hashCode = hashCode * 59 + ActionId.GetHashCode();
                    if (ActionValueType != null)
                    hashCode = hashCode * 59 + ActionValueType.GetHashCode();
                    if (ActionValueInt != null)
                    hashCode = hashCode * 59 + ActionValueInt.GetHashCode();
                    if (ActionValueString != null)
                    hashCode = hashCode * 59 + ActionValueString.GetHashCode();
                    if (ActionValueNumber != null)
                    hashCode = hashCode * 59 + ActionValueNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserDeviceAction left, UserDeviceAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserDeviceAction left, UserDeviceAction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
